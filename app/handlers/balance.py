from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from ..config import get_settings
from ..keyboards.common import back_to_main_keyboard
from ..services.billing import BillingService

router = Router()


@router.message(Command("pricing"))
async def cmd_pricing(message: Message):
    settings = get_settings()
    text = (
        "üíµ –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞: {settings.price_buy_rub}‚ÇΩ –∑–∞ —Ç–æ–∫–µ–Ω\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞: {settings.price_sell_rub}‚ÇΩ –∑–∞ —Ç–æ–∫–µ–Ω\n"
        "–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã."
    )
    await message.answer(text, reply_markup=back_to_main_keyboard())


@router.message(Command("balance"))
async def show_balance(message: Message, billing_service: BillingService):
    user = await billing_service.get_user(message.chat.id)
    balance = user.balance if user else 0
    await message.answer(
        f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> —Ç–æ–∫–µ–Ω–æ–≤",
        reply_markup=back_to_main_keyboard(),
    )


@router.message(Command("history"))
async def history(message: Message, billing_service: BillingService):
    user = await billing_service.get_user(message.chat.id)
    if not user:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.")
        return
    transactions = await billing_service.list_user_history(user)
    if not transactions:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", reply_markup=back_to_main_keyboard())
        return
    lines = ["üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
    for txn in transactions[:10]:
        sign = "‚ûï" if txn.amount > 0 else "‚ûñ"
        lines.append(
            f"{txn.created_at:%Y-%m-%d %H:%M} | {sign}{abs(txn.amount)} | {txn.type.value}"
        )
    await message.answer("\n".join(lines), reply_markup=back_to_main_keyboard())


@router.message(Command("support"))
async def support(message: Message):
    await message.answer(
        "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @hunt_tg –∏ @berkyt –ø–æ–º–æ–≥—É—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
        reply_markup=back_to_main_keyboard(),
    )
