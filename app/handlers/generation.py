from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from ..services.integrations import IntegrationService

router = Router()


@router.message(Command("generate"))
async def generate_demo(message: Message, integration_service: IntegrationService):
    args = message.text.split(maxsplit=1) if message.text else []
    prompt = args[1] if len(args) == 2 else "demo"

    if not integration_service.image_ready:
        await message.answer(
            "‚ö†Ô∏è –¢–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ IMAGE_API_TOKEN –≤ .env, "
            "—á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é."
        )
        return

    status_message = await message.answer("üé® –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é‚Ä¶")
    async for update in integration_service.simulate_generation(prompt):
        await status_message.edit_text(update)

